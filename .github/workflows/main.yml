# .github/workflows/main.yml
name: Deploy Bookstore to DigitalOcean App Platform

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to deploy (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      project_id:
        description: 'DigitalOcean Project ID (optional - uses default if not specified)'
        required: false
        default: ''

env:
  APP_NAME: "bookstore-app"
  REGISTRY_NAME: "sanithujayafiverr"
  IMAGE_NAME: "bookstore"
  REGION: "blr"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set release tag and project
      id: release
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "üéØ Release triggered deployment for: $RELEASE_TAG"
        else
          RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          echo "üîß Manual deployment triggered for: $RELEASE_TAG"
        fi
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        
        # Handle project ID
        PROJECT_ID="${{ github.event.inputs.project_id || '' }}"
        if [ -n "$PROJECT_ID" ]; then
          echo "üìã Using specified project ID: $PROJECT_ID"
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          echo "use_project=true" >> $GITHUB_OUTPUT
        else
          echo "üìã No project specified - will use account default"
          echo "use_project=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Download WAR file from release
      run: |
        RELEASE_TAG="${{ steps.release.outputs.release_tag }}"
        echo "üì¶ Looking for WAR file in release: $RELEASE_TAG"
        
        RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}")
        
        if echo "$RELEASE_DATA" | jq -e '.message == "Not Found"' > /dev/null; then
          echo "‚ùå Release '$RELEASE_TAG' not found!"
          echo "Available releases:"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '.[].tag_name' | head -5
          exit 1
        fi
        
        WAR_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | endswith(".war")) | .browser_download_url')
        
        if [ -z "$WAR_URL" ] || [ "$WAR_URL" = "null" ]; then
          echo "‚ùå No WAR file found in release assets for '$RELEASE_TAG'"
          echo "Available assets:"
          echo "$RELEASE_DATA" | jq -r '.assets[].name'
          exit 1
        fi
        
        echo "üì• Downloading: $WAR_URL"
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -o bookstore-1.0.0.war "$WAR_URL"
        
        echo "‚úÖ Downloaded WAR file:"
        ls -lh bookstore-1.0.0.war
    
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}
    
    - name: List available projects
      if: steps.release.outputs.use_project == 'false'
      run: |
        echo "üìã Available projects in your account:"
        doctl projects list --output json | jq -r '.[] | "  ‚Ä¢ \(.name) (ID: \(.id))"'
        echo ""
        echo "üí° To deploy to a specific project, use the 'project_id' input parameter"
        echo "   when running this workflow manually, or set DO_PROJECT_ID secret"
    
    - name: Validate project ID
      if: steps.release.outputs.use_project == 'true'
      run: |
        PROJECT_ID="${{ steps.release.outputs.project_id }}"
        echo "üîç Validating project ID: $PROJECT_ID"
        
        if ! doctl projects get $PROJECT_ID >/dev/null 2>&1; then
          echo "‚ùå Project ID '$PROJECT_ID' not found or inaccessible"
          echo "üìã Available projects:"
          doctl projects list --output json | jq -r '.[] | "  ‚Ä¢ \(.name) (ID: \(.id))"'
          exit 1
        fi
        
        PROJECT_NAME=$(doctl projects get $PROJECT_ID --output json | jq -r '.name')
        echo "‚úÖ Validated project: $PROJECT_NAME (ID: $PROJECT_ID)"
    
    - name: Check and create container registry
      id: registry
      run: |
        echo "üîç Checking if container registry exists..."
        
        # Check if registry exists
        if doctl registry get $REGISTRY_NAME >/dev/null 2>&1; then
          echo "‚úÖ Registry '$REGISTRY_NAME' already exists"
          REGISTRY_EXISTS=true
        else
          echo "üìù Creating container registry '$REGISTRY_NAME'..."
          doctl registry create $REGISTRY_NAME --region $REGION
          echo "‚úÖ Registry '$REGISTRY_NAME' created successfully"
          REGISTRY_EXISTS=false
          
          # Wait a moment for registry to be ready
          sleep 10
        fi
        
        echo "registry_exists=$REGISTRY_EXISTS" >> $GITHUB_OUTPUT
        echo "registry_url=registry.digitalocean.com/$REGISTRY_NAME" >> $GITHUB_OUTPUT
    
    - name: Check if image already exists
      id: image_check
      run: |
        # Login to DigitalOcean Container Registry
        echo "üîê Logging into container registry..."
        doctl registry login
        
        IMAGE_FULL_NAME="${{ steps.registry.outputs.registry_url }}/$IMAGE_NAME"
        RELEASE_TAG="${{ steps.release.outputs.release_tag }}"
        
        echo "üîç Checking if image already exists for release: $RELEASE_TAG"
        
        # Check if the specific release tag exists in registry without downloading
        IMAGE_EXISTS=false
        
        # Method 1: Use doctl registry repository list-tags (most efficient for DO registry)
        echo "üìã Checking DigitalOcean registry for existing tags..."
        if doctl registry repository list-tags $REGISTRY_NAME/$IMAGE_NAME --output json | jq -e --arg tag "$RELEASE_TAG" '.[] | select(.tag == $tag)' >/dev/null 2>&1; then
          echo "‚úÖ Image found in DO registry: ${IMAGE_FULL_NAME}:${RELEASE_TAG}"
          IMAGE_EXISTS=true
        else
          # Method 2: Fallback to Docker manifest inspect (doesn't download image)
          echo "üìã Fallback: Using Docker manifest inspection..."
          if docker manifest inspect ${IMAGE_FULL_NAME}:${RELEASE_TAG} >/dev/null 2>&1; then
            echo "‚úÖ Image manifest found: ${IMAGE_FULL_NAME}:${RELEASE_TAG}"
            IMAGE_EXISTS=true
          else
            echo "‚ùå Image not found: ${IMAGE_FULL_NAME}:${RELEASE_TAG}"
            IMAGE_EXISTS=false
          fi
        fi
        
        if [ "$IMAGE_EXISTS" = "true" ]; then
          echo "üìã Image exists - no build needed for this release"
        else
          echo "üìã Image not found - will build and push new image"
        fi
        
        echo "image_exists=$IMAGE_EXISTS" >> $GITHUB_OUTPUT
        echo "image_full_name=$IMAGE_FULL_NAME" >> $GITHUB_OUTPUT
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
    
    - name: Get WAR file hash for comparison
      id: war_hash
      run: |
        # Calculate hash of the WAR file to compare with existing image
        WAR_HASH=$(sha256sum bookstore-1.0.0.war | cut -d' ' -f1)
        echo "üìã WAR file hash: $WAR_HASH"
        echo "war_hash=$WAR_HASH" >> $GITHUB_OUTPUT
        
        # Store release info for image labeling
        RELEASE_TAG="${{ steps.image_check.outputs.release_tag }}"
        BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        COMMIT_SHA="${{ github.sha }}"
        
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      if: steps.image_check.outputs.image_exists == 'false'
      run: |
        IMAGE_FULL_NAME="${{ steps.image_check.outputs.image_full_name }}"
        RELEASE_TAG="${{ steps.image_check.outputs.release_tag }}"
        WAR_HASH="${{ steps.war_hash.outputs.war_hash }}"
        BUILD_DATE="${{ steps.war_hash.outputs.build_date }}"
        COMMIT_SHA="${{ steps.war_hash.outputs.commit_sha }}"
        
        echo "üèóÔ∏è Building Docker image with version tracking..."
        echo "Image: $IMAGE_FULL_NAME"
        echo "Release: $RELEASE_TAG"
        echo "WAR Hash: $WAR_HASH"
        
        # Build with comprehensive labels for tracking
        docker build \
          --build-arg BUILD_DATE="$BUILD_DATE" \
          --build-arg VCS_REF="$COMMIT_SHA" \
          --build-arg VERSION="$RELEASE_TAG" \
          --label "org.opencontainers.image.version=$RELEASE_TAG" \
          --label "org.opencontainers.image.created=$BUILD_DATE" \
          --label "org.opencontainers.image.revision=$COMMIT_SHA" \
          --label "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}" \
          --label "bookstore.war.hash=$WAR_HASH" \
          --label "bookstore.release.tag=$RELEASE_TAG" \
          --label "bookstore.build.workflow=${{ github.run_id }}" \
          -t ${IMAGE_FULL_NAME}:${RELEASE_TAG} \
          .
        
        # Also tag as latest
        docker tag ${IMAGE_FULL_NAME}:${RELEASE_TAG} ${IMAGE_FULL_NAME}:latest
        
        echo "üì§ Pushing to DigitalOcean Container Registry..."
        docker push ${IMAGE_FULL_NAME}:${RELEASE_TAG}
        docker push ${IMAGE_FULL_NAME}:latest
        
        echo "‚úÖ Container image built and pushed successfully!"
        echo "üè∑Ô∏è Tags: ${RELEASE_TAG}, latest"
        echo "üîó Image: ${IMAGE_FULL_NAME}:${RELEASE_TAG}"
    
    - name: Use existing image
      if: steps.image_check.outputs.image_exists == 'true'
      run: |
        IMAGE_FULL_NAME="${{ steps.image_check.outputs.image_full_name }}"
        RELEASE_TAG="${{ steps.image_check.outputs.release_tag }}"
        
        echo "‚ôªÔ∏è  Using existing image: ${IMAGE_FULL_NAME}:${RELEASE_TAG}"
        echo "‚ö° Skipping build - image already exists for this release"
        
        # Only update latest tag if it's different from current latest
        echo "üîÑ Checking if 'latest' tag needs updating..."
        
        # Get current latest tag digest
        LATEST_DIGEST=""
        RELEASE_DIGEST=""
        
        if LATEST_DIGEST=$(docker manifest inspect ${IMAGE_FULL_NAME}:latest 2>/dev/null | jq -r '.config.digest // empty'); then
          echo "üìã Current latest digest: $LATEST_DIGEST"
        fi
        
        if RELEASE_DIGEST=$(docker manifest inspect ${IMAGE_FULL_NAME}:${RELEASE_TAG} 2>/dev/null | jq -r '.config.digest // empty'); then
          echo "üìã Release tag digest: $RELEASE_DIGEST"
        fi
        
        # Only pull and push if digests are different
        if [ "$LATEST_DIGEST" != "$RELEASE_DIGEST" ] || [ -z "$LATEST_DIGEST" ]; then
          echo "üîÑ Updating 'latest' tag to point to $RELEASE_TAG"
          docker pull ${IMAGE_FULL_NAME}:${RELEASE_TAG}
          docker tag ${IMAGE_FULL_NAME}:${RELEASE_TAG} ${IMAGE_FULL_NAME}:latest
          docker push ${IMAGE_FULL_NAME}:latest
          echo "‚úÖ Latest tag updated successfully!"
        else
          echo "‚úÖ Latest tag already points to the same image - no update needed!"
        fi
    
    - name: Check if App Platform app exists
      id: app_check
      run: |
        echo "üîç Checking if App Platform app exists..."
        
        # Try to get app by name (we'll search through all apps)
        APP_ID=""
        APP_EXISTS=false
        
        # Get all apps and find ours by name - with project info if specified
        if [ "${{ steps.release.outputs.use_project }}" = "true" ]; then
          APPS_JSON=$(doctl apps list --with-projects --output json)
          PROJECT_ID="${{ steps.release.outputs.project_id }}"
          
          # Filter by both name and project
          APP_ID=$(echo "$APPS_JSON" | jq -r ".[] | select(.spec.name == \"$APP_NAME\" and .project_id == \"$PROJECT_ID\") | .id")
        else
          APPS_JSON=$(doctl apps list --output json)
          APP_ID=$(echo "$APPS_JSON" | jq -r ".[] | select(.spec.name == \"$APP_NAME\") | .id")
        fi
        
        if [ -n "$APP_ID" ] && [ "$APP_ID" != "null" ]; then
          echo "‚úÖ App '$APP_NAME' found with ID: $APP_ID"
          APP_EXISTS=true
        else
          echo "üìù App '$APP_NAME' not found, will create new app"
        fi
        
        echo "app_exists=$APP_EXISTS" >> $GITHUB_OUTPUT
        echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
    
    - name: Create or update App Platform app
      id: app_deploy
      run: |
        IMAGE_FULL_NAME="${{ steps.registry.outputs.registry_url }}/$IMAGE_NAME"
        APP_EXISTS="${{ steps.app_check.outputs.app_exists }}"
        APP_ID="${{ steps.app_check.outputs.app_id }}"
        USE_PROJECT="${{ steps.release.outputs.use_project }}"
        PROJECT_ID="${{ steps.release.outputs.project_id }}"
        
        # Create app specification
        cat > app-spec.yaml << 'EOF'
        name: bookstore-app
        region: blr
        alerts:
        - rule: DEPLOYMENT_FAILED
        - rule: DOMAIN_FAILED
        services:
        - name: bookstore
          image:
            registry_type: DOCR
            registry: sanithujayafiverr
            repository: bookstore
            tag: latest
          http_port: 8080
          instance_count: 1
          instance_size_slug: basic-xxs
        EOF
        
        echo "üìã Generated app spec:"
        cat app-spec.yaml
        
        # Validate the app spec first
        echo "üîç Validating app spec..."
        if ! doctl apps spec validate app-spec.yaml; then
          echo "‚ùå App spec validation failed!"
          exit 1
        fi
        echo "‚úÖ App spec validation passed"
        
        # Prepare command with optional project ID
        if [ "$APP_EXISTS" = "true" ]; then
          echo "üîÑ Updating existing app with ID: $APP_ID"
          doctl apps update $APP_ID --spec app-spec.yaml --wait
          echo "app_id=$APP_ID" >> $GITHUB_OUTPUT
        else
          echo "üöÄ Creating new App Platform app..."
          
          # Build create command with optional project ID
          if [ "$USE_PROJECT" = "true" ]; then
            echo "üìã Creating app in project: $PROJECT_ID"
            CREATE_OUTPUT=$(doctl apps create --spec app-spec.yaml --project-id "$PROJECT_ID" --output json --wait)
          else
            echo "üìã Creating app in default project"
            CREATE_OUTPUT=$(doctl apps create --spec app-spec.yaml --output json --wait)
          fi
          
          # Debug: Show the full response
          echo "üîç DEBUG: Full CREATE_OUTPUT:"
          echo "$CREATE_OUTPUT"
          
          # Parse the app ID from the response
          # First, check if it's an array or object
          if echo "$CREATE_OUTPUT" | jq -e 'type == "array"' >/dev/null 2>&1; then
            echo "üìã Response is an array, getting first element"
            NEW_APP_ID=$(echo "$CREATE_OUTPUT" | jq -r '.[0].id // empty')
          else
            echo "üìã Response is an object, getting id directly"
            NEW_APP_ID=$(echo "$CREATE_OUTPUT" | jq -r '.id // empty')
          fi
          
          if [ -z "$NEW_APP_ID" ] || [ "$NEW_APP_ID" = "null" ]; then
            echo "‚ùå Failed to extract app ID from response"
            echo "Response structure:"
            echo "$CREATE_OUTPUT" | jq '.'
            exit 1
          fi
          
          echo "‚úÖ App created with ID: $NEW_APP_ID"
          echo "app_id=$NEW_APP_ID" >> $GITHUB_OUTPUT
        fi
    
    - name: Get deployment status and URL
      run: |
        APP_ID="${{ steps.app_deploy.outputs.app_id }}"
        IMAGE_EXISTS="${{ steps.image_check.outputs.image_exists }}"
        IMAGE_FULL_NAME="${{ steps.image_check.outputs.image_full_name }}"
        RELEASE_TAG="${{ steps.image_check.outputs.release_tag }}"
        USE_PROJECT="${{ steps.release.outputs.use_project }}"
        
        echo "üìä Getting deployment status..."
        
        # Get app details
        APP_INFO=$(doctl apps get $APP_ID --output json)
        
        # Debug: Show the full response structure
        echo "üîç DEBUG: APP_INFO structure:"
        echo "$APP_INFO" | jq 'type'
        
        # Parse app details - handle both array and object responses
        if echo "$APP_INFO" | jq -e 'type == "array"' >/dev/null 2>&1; then
          echo "üìã Response is an array, getting first element"
          APP_URL=$(echo "$APP_INFO" | jq -r '.[0].default_ingress // .[0].live_url // empty')
          PROJECT_ID=$(echo "$APP_INFO" | jq -r '.[0].project_id // empty')
        else
          echo "üìã Response is an object, getting fields directly"
          APP_URL=$(echo "$APP_INFO" | jq -r '.default_ingress // .live_url // empty')
          PROJECT_ID=$(echo "$APP_INFO" | jq -r '.project_id // empty')
        fi
        
        echo "‚úÖ Deployment completed successfully!"
        echo ""
        echo "üéâ DEPLOYMENT SUMMARY"
        echo "================================================"
        echo "üìã App Name: $APP_NAME"
        echo "üÜî App ID: $APP_ID"
        if [ -n "$PROJECT_ID" ] && [ "$PROJECT_ID" != "null" ]; then
          PROJECT_NAME=$(doctl projects get $PROJECT_ID --output json | jq -r '.name // "Unknown"')
          echo "üìÅ Project: $PROJECT_NAME ($PROJECT_ID)"
        fi
        echo "üì¶ Image: ${IMAGE_FULL_NAME}:${RELEASE_TAG}"
        echo "üè∑Ô∏è Release: $RELEASE_TAG"
        echo "‚ôªÔ∏è  Image Reused: $([ "$IMAGE_EXISTS" = "true" ] && echo "Yes (existing)" || echo "No (newly built)")"
        echo "üåç Region: $REGION"
        echo "üí∞ Instance: basic-xxs (~$5/month)"
        echo "================================================"
        
        if [ -n "$APP_URL" ] && [ "$APP_URL" != "null" ]; then
          echo "üåê Your application is available at: $APP_URL"
          echo "üì± Direct link: $APP_URL/bookstore/"
        else
          echo "‚è≥ URL will be available once deployment completes"
          echo "   Check your DigitalOcean dashboard for the URL"
        fi
        
        echo ""
        echo "üîó Useful commands:"
        echo "   Monitor logs: doctl apps logs $APP_ID --follow"
        echo "   Check status: doctl apps get $APP_ID"
        echo "   View in dashboard: https://cloud.digitalocean.com/apps/$APP_ID"
    
    - name: Cleanup on failure
      if: failure()
      run: |
        echo "üßπ Cleaning up on failure..."
        
        # If we created a registry but deployment failed, optionally clean it up
        if [ "${{ steps.registry.outputs.registry_exists }}" = "false" ]; then
          echo "‚ö†Ô∏è  Registry was created during this run"
          echo "   You may want to clean it up: doctl registry delete $REGISTRY_NAME"
        fi
        
        # If we created an app but it failed, optionally clean it up
        if [ "${{ steps.app_check.outputs.app_exists }}" = "false" ] && [ -n "${{ steps.app_deploy.outputs.app_id }}" ]; then
          echo "‚ö†Ô∏è  App was created during this run: ${{ steps.app_deploy.outputs.app_id }}"
          echo "   You may want to clean it up: doctl apps delete ${{ steps.app_deploy.outputs.app_id }}"
        fi