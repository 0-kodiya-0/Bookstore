# File: .github/workflows/main.yml
name: Deploy Release to DigitalOcean App Platform

# TRIGGER: This workflow runs when you publish a release OR manually trigger it
on:
  release:
    types: [published]  # When you click "Publish release"
  workflow_dispatch:   # Manual trigger for testing
    inputs:
      release_tag:
        description: 'Release tag to deploy (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    # STEP 1: Get access to your repository code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # STEP 2: Determine which release to deploy
    - name: Set release tag
      id: release
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          RELEASE_TAG="${{ github.event.release.tag_name }}"
          echo "üéØ Release triggered deployment for: $RELEASE_TAG"
        else
          RELEASE_TAG="${{ github.event.inputs.release_tag }}"
          echo "üîß Manual deployment triggered for: $RELEASE_TAG"
        fi
        
        echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "Release tag: $RELEASE_TAG"
    
    # STEP 3: Download the WAR file from your release
    - name: Download WAR file from release
      run: |
        RELEASE_TAG="${{ steps.release.outputs.release_tag }}"
        echo "üì¶ Looking for WAR file in release: $RELEASE_TAG"
        
        # Use GitHub API to find the WAR file in your release
        echo "üîç Checking release: https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}"
        
        RELEASE_DATA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}")
        
        # Check if release exists
        if echo "$RELEASE_DATA" | jq -e '.message == "Not Found"' > /dev/null; then
          echo "‚ùå Release '$RELEASE_TAG' not found!"
          echo "Available releases:"
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases" | \
            jq -r '.[].tag_name' | head -10
          exit 1
        fi
        
        # Find WAR file in release assets
        WAR_URL=$(echo "$RELEASE_DATA" | jq -r '.assets[] | select(.name | endswith(".war")) | .browser_download_url')
        
        # Check if WAR file was found
        if [ -z "$WAR_URL" ] || [ "$WAR_URL" = "null" ]; then
          echo "‚ùå No WAR file found in release assets for '$RELEASE_TAG'"
          echo "Available assets:"
          echo "$RELEASE_DATA" | jq -r '.assets[].name'
          echo ""
          echo "üí° Make sure you:"
          echo "1. Built your project: mvn clean package"
          echo "2. Uploaded the WAR file to your release"
          echo "3. Used the correct release tag"
          exit 1
        fi
        
        # Download the WAR file
        echo "üì• Downloading: $WAR_URL"
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -o bookstore-1.0.0.war "$WAR_URL"
        
        # Verify the download worked
        if [ ! -f "bookstore-1.0.0.war" ]; then
          echo "‚ùå Failed to download WAR file"
          exit 1
        fi
        
        echo "‚úÖ Downloaded WAR file:"
        ls -lh bookstore-1.0.0.war
    
    # STEP 4: Install DigitalOcean CLI tool
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}
    
    # STEP 5: Build Docker container and push to registry
    - name: Build and push Docker image
      run: |
        # Login to DigitalOcean Container Registry
        doctl registry login
        
        # Build the Docker image using your Dockerfile
        IMAGE_NAME="registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/bookstore"
        RELEASE_TAG="${{ steps.release.outputs.release_tag }}"
        
        echo "üèóÔ∏è Building Docker image..."
        docker build -t ${IMAGE_NAME}:${RELEASE_TAG} .
        docker build -t ${IMAGE_NAME}:latest .
        
        # Push both the version tag and 'latest' tag
        echo "üì§ Pushing to DigitalOcean Container Registry..."
        docker push ${IMAGE_NAME}:${RELEASE_TAG}
        docker push ${IMAGE_NAME}:latest
        
        echo "‚úÖ Container image pushed successfully!"
        echo "üè∑Ô∏è Tags: ${RELEASE_TAG}, latest"
    
    # STEP 6: Deploy to App Platform
    - name: Deploy to App Platform
      run: |
        APP_ID="${{ secrets.DO_APP_ID }}"
        
        echo "üöÄ Triggering deployment for App Platform..."
        echo "App ID: $APP_ID"
        
        # Tell App Platform to deploy the new container
        doctl apps create-deployment $APP_ID --wait
        
        echo "‚úÖ Deployment completed!"
        
        # Get the URL where your app is running
        APP_URL=$(doctl apps get $APP_ID --format URL --no-header)
        echo "üåê Your application is available at: $APP_URL"
        
    # STEP 7: Show deployment summary
    - name: Deployment Summary
      run: |
        RELEASE_TAG="${{ steps.release.outputs.release_tag }}"
        echo ""
        echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "================================================"
        echo "üìã Release Version: $RELEASE_TAG"
        echo "üì¶ WAR File: bookstore-1.0.0.war"
        echo "üê≥ Container: Tomcat 9.0.100 + JDK 8"
        echo "üèóÔ∏è Platform: DigitalOcean App Platform"
        echo "üí∞ Monthly Cost: ~$12 (Basic instance)"
        echo "üîí HTTPS: Automatic SSL certificate"
        echo "üìä Monitoring: Built-in metrics and logs"
        echo "‚ö° Scaling: Automatic load balancing"
        echo "================================================"
        echo "‚úÖ Your Bookstore application is now LIVE!"