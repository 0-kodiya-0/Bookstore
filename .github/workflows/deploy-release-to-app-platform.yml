# File: .github/workflows/deploy-release-to-app-platform.yml
# Location: .github/workflows/deploy-release-to-app-platform.yml
# Purpose: Automatically deploys your application when you create a GitHub release

name: Deploy Release to DigitalOcean App Platform

# TRIGGER: This workflow ONLY runs when you publish a release
# It will NOT run on regular commits or pull requests
on:
  release:
    types: [published]  # Only when you click "Publish release"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use GitHub's Ubuntu server to run this
    
    steps:
    # STEP 1: Get access to your repository code
    - name: Checkout code
      uses: actions/checkout@v4
    
    # STEP 2: Download the WAR file from your release
    - name: Download WAR file from release
      run: |
        RELEASE_TAG=${{ github.event.release.tag_name }}
        echo "üì¶ Looking for WAR file in release: $RELEASE_TAG"
        
        # Use GitHub API to find the WAR file in your release
        WAR_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${RELEASE_TAG}" | \
          jq -r '.assets[] | select(.name | endswith(".war")) | .browser_download_url')
        
        # Check if WAR file was found
        if [ -z "$WAR_URL" ] || [ "$WAR_URL" = "null" ]; then
          echo "‚ùå No WAR file found in release assets"
          echo "Make sure you uploaded a .war file to your release!"
          exit 1
        fi
        
        # Download the WAR file
        echo "üì• Downloading: $WAR_URL"
        curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
             -o bookstore-1.0.0.war "$WAR_URL"
        
        # Verify the download worked
        echo "‚úÖ Downloaded WAR file:"
        ls -lh bookstore-1.0.0.war
    
    # STEP 3: Install DigitalOcean CLI tool
    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DO_TOKEN }}  # Your DigitalOcean API token
    
    # STEP 4: Build Docker container and push to registry
    - name: Build and push Docker image
      run: |
        # Login to DigitalOcean Container Registry
        doctl registry login
        
        # Build the Docker image using your Dockerfile
        IMAGE_NAME="registry.digitalocean.com/${{ secrets.DO_REGISTRY_NAME }}/bookstore"
        
        echo "üèóÔ∏è Building Docker image..."
        docker build -t ${IMAGE_NAME}:${{ github.event.release.tag_name }} .
        docker build -t ${IMAGE_NAME}:latest .
        
        # Push both the version tag and 'latest' tag
        echo "üì§ Pushing to DigitalOcean Container Registry..."
        docker push ${IMAGE_NAME}:${{ github.event.release.tag_name }}
        docker push ${IMAGE_NAME}:latest
        
        echo "‚úÖ Container image pushed successfully!"
        echo "üè∑Ô∏è Tags: ${{ github.event.release.tag_name }}, latest"
    
    # STEP 5: Deploy to App Platform
    - name: Deploy to App Platform
      run: |
        APP_ID="${{ secrets.DO_APP_ID }}"
        
        echo "üöÄ Triggering deployment for App Platform..."
        echo "App ID: $APP_ID"
        
        # Tell App Platform to deploy the new container
        doctl apps create-deployment $APP_ID --wait
        
        echo "‚úÖ Deployment completed!"
        
        # Get the URL where your app is running
        APP_URL=$(doctl apps get $APP_ID --format URL --no-header)
        echo "üåê Your application is available at: $APP_URL"
        
    # STEP 6: Show deployment summary
    - name: Deployment Summary
      run: |
        echo ""
        echo "üéâ DEPLOYMENT COMPLETED SUCCESSFULLY!"
        echo "================================================"
        echo "üìã Release Version: ${{ github.event.release.tag_name }}"
        echo "üì¶ WAR File: bookstore-1.0.0.war"
        echo "üê≥ Container: Tomcat 9.0.100 + JDK 8"
        echo "üèóÔ∏è Platform: DigitalOcean App Platform"
        echo "üí∞ Monthly Cost: ~$12 (Basic instance)"
        echo "üîí HTTPS: Automatic SSL certificate"
        echo "üìä Monitoring: Built-in metrics and logs"
        echo "‚ö° Scaling: Automatic load balancing"
        echo "================================================"
        echo "‚úÖ Your Bookstore application is now LIVE!"

# What this workflow does:
# 1. Waits for you to publish a GitHub release
# 2. Downloads your bookstore-1.0.0.war file from the release
# 3. Builds a Docker container with Tomcat + your WAR file
# 4. Pushes the container to DigitalOcean's registry
# 5. Tells App Platform to deploy the new container
# 6. Your app becomes live at the App Platform URL!
